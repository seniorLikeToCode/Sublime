<snippet>
	<content><![CDATA[
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

// username: seniorBOTx (Abhishek Gupta [AKGEC,CSIT,2nd year])

using namespace std;
using namespace __gnu_pbds;

#define int     int64_t
#define endl    '\n'

#define rep(i,a,n)         for(int i = (a); i < (n); i++)
#define rrep(i,a,n)        for(int i = (a); i >= (n); i--)
#define each(a,x)          for(auto &a:x)

#define all(x)             x.begin(), x.end()
#define rall(x)            x.rbegin(),x.rend()
#define sz(x)              (int)(x).size()
#define setBits(x)         __builtin_popcountll(x)

#define F  first
#define S  second
#define pb push_back
#define Z  pair<int,int>

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;  /*find_by_order order_of_key */
void Print(int32_t x) {cout << x << " ";} void Print(char x) {cout << x << " ";} void Print(double x) {cout << x << " ";} void Print(int x) {cout << x << " ";}
void print() {cout << endl;} void Print(const char *x) {cout << x << " ";} void Print(const string &x) {cout << x << " ";}
void Print(bool x) {cout << (x ? "YES" : "NO");}  template<typename T, typename V> void Print(const pair<T, V> x) {cout << x.F << " " << x.S << endl;}
template<typename T> void Print(const T &x) {for (auto &i : x) Print(i);} template <typename T, typename... V> void print(T t, V... v) { Print(t); print(v...);}


void solve() {$2}

int32_t main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cout.precision(15); cout << fixed;

	int testCase{}; cin >> testCase;
	while (testCase--) solve();
}
]]>
	
</content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>godspeed</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>

</snippet>
