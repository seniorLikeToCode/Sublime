<snippet>
	<content><![CDATA[

typedef int Node;
struct segTree {
    int size, INF = 1e17;
    vector<Node> values;

    segTree (int n) {
        size = 1;
        while (size < n) size *= 2;
        values.resize(2 * size);
    }

    Node baseValue = 0;  // identity element
    Node merge(Node a, Node b) {   //merge operation for utility function
        return a + b;
    }
    Node single(int v) {   // base case value
        return v;
    }

    void build(vector<int> &a, int x, int lx, int rx) {
        if (rx - lx == 1) {
            if (lx < sz(a)) values[x] = single(a[lx]);
            return;
        }

        int m = (lx + rx) / 2;
        build(a, 2 * x + 1, lx, m);
        build(a, 2 * x + 2, m, rx);

        values[x] = merge(values[2 * x + 1] , values[2 * x + 2]);
    }

    void setUtility(int i, int v, int x, int lx, int rx) {
        if (rx - lx == 1) {
            values[x] = single(v);
            return;
        }
        int m = (lx + rx) / 2;
        if (i < m) setUtility(i, v, 2 * x + 1, lx, m);
        else setUtility(i, v, 2 * x + 2, m, rx);

        values[x] = merge(values[2 * x + 1] , values[2 * x + 2]);
    }


    Node queryUtility(int l, int r, int x, int lx, int rx) {
        if (lx >= r or l >= rx) return baseValue;
        if (lx >= l and rx <= r) return values[x];

        int m = (lx + rx) / 2;
        Node si = queryUtility(l, r, 2 * x + 1, lx, m);
        Node sj = queryUtility(l, r, 2 * x + 2, m, rx);

        return merge(si , sj);
    }

    void build(vector<int> &a) {build(a, 0, 0, size);}
    void set(int i, int v) { setUtility(i, v, 0, 0, size);}
    Node query(int l, int r) {return queryUtility(l, r, 0, 0, size);}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
