<snippet>
	<content><![CDATA[

/*
 * Description: Data structure that supports range idempotent queries on a static array.
 * Time Complexity: O(nlogn) build, O(1) query.
*/

template <typename T>
struct SparseTable {
    vector<vector<T>> spar;
    inline T merge(const T& a, const T& b) { // change this
        return max(a, b);
    }
    SparseTable(const vector<T>& a) {
        int lg = 32 - __builtin_clz(sz(a));
        spar.assign(lg, vector<int>(sz(a), 0));
        for (int i = 0; i < sz(a); ++i) spar[0][i] = a[i];
        for (int j = 1; j < lg; ++j)
            for (int i = 0; i + (1 << j) <= sz(a); ++i)
                spar[j][i] = merge(spar[j - 1][i], spar[j - 1][i + (1 << (j - 1))]);
    }
    T query(int a, int b) {
        assert(a <= b);
        int dif = 31 - __builtin_clz(b - a + 1);
        return merge(spar[dif][a], spar[dif][b - (1 << dif) + 1]);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sparsetable</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
